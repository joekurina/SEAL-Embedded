cmake_minimum_required(VERSION 3.16)

#####################################################################
#                  Start of configuration section                   #
#####################################################################

# Set the build to always be local
set(SE_BUILD_LOCAL ON CACHE BOOL "Build for native instead of device" FORCE)

# Set the compilers to Intel OneAPI
set(CMAKE_C_COMPILER icx)
set(CMAKE_CXX_COMPILER icpx)
set(FPGA_DEVICE "Agilex7")
set(EMULATOR_TARGET fpga_emu)
set(REPORT_TARGET report)
set(TARGET_NAME sealembedded)
set(REPORT_OUTPUT_NAME ${TARGET_NAME}.${REPORT_TARGET})

# Enable SYCL and C99 support in C++
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsycl -std=c++17")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
    
# Set FPGA flags
set(REPORT_COMPILE_FLAGS -DFPGA_HARDWARE)
set(REPORT_LINK_FLAGS -Xshardware -Xstarget=${FPGA_DEVICE} -fno-sycl-unnamed-lambda)

project(SEAL_EMBEDDED VERSION 1.1.0 LANGUAGES C CXX ASM)

#################
# Configuration #
#################

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Adapter file output directory
set(SE_ADAPTER_FILE_OUTPUT_DIR ${CMAKE_CURRENT_LIST_DIR}/adapter_output_data
    CACHE STRING "Adapter file directory" FORCE)
message(STATUS "Adapter file directory: ${SE_ADAPTER_FILE_OUTPUT_DIR}")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Build type" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Release" "Debug" "MinSizeRel" "RelWithDebInfo")
endif()
message(STATUS "Build type (CMAKE_BUILD_TYPE): ${CMAKE_BUILD_TYPE}")

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    include(CheckCXXCompilerFlag)
    function(se_enable_cxx_compiler_flag_if_supported flag)
        string(FIND "${CMAKE_CXX_FLAGS}" "${flag}" flag_already_set)
        if(flag_already_set EQUAL -1)
            message(STATUS "Adding CXX compiler flag: ${flag} ...")
            check_cxx_compiler_flag("${flag}" flag_supported)
            if(flag_supported)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}" PARENT_SCOPE)
            endif()
            unset(flag_supported CACHE)
        endif()
    endfunction()
    if(NOT MSVC AND SEAL_DEBUG)
        se_enable_cxx_compiler_flag_if_supported("-Wall")
        se_enable_cxx_compiler_flag_if_supported("-Wextra")
        se_enable_cxx_compiler_flag_if_supported("-Wconversion")
        se_enable_cxx_compiler_flag_if_supported("-Wshadow")
        se_enable_cxx_compiler_flag_if_supported("-pedantic")
    endif()
endif()

if(NOT SE_BUILD_TYPE)
    set(SE_BUILD_TYPE "Tests" CACHE STRING "SEAL-Embedded build type" FORCE)
    set_property(CACHE SE_BUILD_TYPE PROPERTY STRINGS "Tests" "Bench" "Lib")
endif()
message(STATUS "Build type (SE_BUILD_TYPE): ${SE_BUILD_TYPE}")

set(SE_ADAPTER_FILE_OUTPUT_DIR_DEVICE adapter_output_data
    CACHE STRING "Adapter file directory (build)" FORCE)

set_property(CACHE SE_BUILD_TYPE PROPERTY STRINGS "Lib" "Bench" "Tests")
message(STATUS "BUILD LOCAL (SE_BUILD_LOCAL): ${SE_BUILD_LOCAL}")
message(STATUS "CMAKE build type (CMAKE_BUILD_TYPE): ${CMAKE_BUILD_TYPE}")
message(STATUS "SEAL-Embedded build type (SE_BUILD_TYPE): ${SE_BUILD_TYPE}")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_RUNTIME_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/bin)

set(SE_LIB_SOURCE_FILES "")
set(SE_BENCH_SOURCE_FILES "")
set(SE_TESTS_SOURCE_FILES "")

add_subdirectory(lib)
add_subdirectory(bench)
add_subdirectory(test)

set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS} -x assembler-with-cpp")

# Set up the static library
add_library(seal_embedded STATIC ${SE_LIB_SOURCE_FILES})
target_include_directories(seal_embedded PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/lib>)
target_include_directories(seal_embedded PUBLIC ${SE_ADAPTER_FILE_OUTPUT_DIR})
target_link_libraries(seal_embedded PRIVATE m)

set_target_properties(seal_embedded PROPERTIES VERSION ${SEAL_EMBEDDED_VERSION})
set_target_properties(seal_embedded PROPERTIES sealembedded
    seal_embedded-${SEAL_EMBEDDED_VERSION_MAJOR}.${SEAL_EMBEDDED_VERSION_MINOR})

# Custom target to display the report generation message
add_custom_target(displayReportMessage
  COMMAND ${CMAKE_COMMAND} -E cmake_echo_color --cyan
  COMMENT "\nGenerating FPGA optimization report for ${TARGET_NAME}.\nThis will analyze resource usage and performance characteristics.\n")

# Create an object library for the report target
add_library(seal_report OBJECT ${SE_LIB_SOURCE_FILES})
target_include_directories(seal_report PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/lib>)
target_include_directories(seal_report PUBLIC ${SE_ADAPTER_FILE_OUTPUT_DIR})
target_compile_options(seal_report PRIVATE ${REPORT_COMPILE_FLAGS})

foreach(source_file ${SE_LIB_SOURCE_FILES})
    get_filename_component(file_ext ${source_file} EXT)
    if(file_ext STREQUAL ".c")
        set_source_files_properties(${source_file} PROPERTIES COMPILE_FLAGS "-x c"
            TARGET_DIRECTORY seal_report)
    endif()
endforeach()

# Create the report target with proper directory handling and expanded argument list
add_custom_target(${REPORT_TARGET} COMMAND_EXPAND_LISTS
  COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/report
  COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/report
          ${CMAKE_CXX_COMPILER} -fsycl -std=c++17 ${REPORT_LINK_FLAGS} -fsycl-link=early $<TARGET_OBJECTS:seal_report>
  COMMENT "Running early compilation for FPGA report generation")

add_dependencies(${REPORT_TARGET} displayReportMessage)
add_dependencies(${REPORT_TARGET} seal_report)

if(SE_BUILD_TYPE STREQUAL "Bench")
    add_executable(seal_embedded_bench ${SE_BENCH_SOURCE_FILES})
    target_link_libraries(seal_embedded_bench PRIVATE m gcc_s c seal_embedded)
    add_dependencies(seal_embedded_bench ${REPORT_TARGET})
elseif(SE_BUILD_TYPE STREQUAL "Tests")
    add_executable(seal_embedded_tests ${SE_TESTS_SOURCE_FILES})
    target_link_libraries(seal_embedded_tests PRIVATE m gcc_s c seal_embedded)
    add_dependencies(seal_embedded_tests ${REPORT_TARGET})
else()
    message(STATUS "No executable will be built")
endif()

# Set preprocessor definitions for the library
add_definitions(-DSE_DATA_PATH="${SE_ADAPTER_FILE_OUTPUT_DIR_DEVICE}")
string(LENGTH "${SE_ADAPTER_FILE_OUTPUT_DIR_DEVICE}" SE_ADAPTER_FILE_OUTPUT_DIR_DEVICE_LEN)
add_definitions(-DSE_DATA_PATH_LEN=${SE_ADAPTER_FILE_OUTPUT_DIR_DEVICE_LEN})

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_definitions(-DSE_UNDEF_ASSERT_FORCE)
endif()

foreach(source_file ${SE_LIB_SOURCE_FILES})
    get_filename_component(file_ext ${source_file} EXT)
    if(file_ext STREQUAL ".c")
        set_source_files_properties(${source_file} PROPERTIES COMPILE_FLAGS "-x c"
            TARGET_DIRECTORY seal_embedded)
    endif()
endforeach()
